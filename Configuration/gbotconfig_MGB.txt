# Granular Robots Incremental Configuration File - MGB

### Environment variables
[envars]
    # Environment variable for the path to the Granulobot folder
    GBOT_BASEPATH = /Users/berthoud/instruments/electro/2021granulobots/Granulobot
    # Environment variable where you want to put the telemetry, log and other data files
    GBOT_DATAPATH = /Users/berthoud/instruments/electro/2021granulobots/data
    # Envar for path to test bin files
    FIRMWARE_BINFILE1 = $GBOT_BASEPATH/TestCode/TinyPicoBinTests/TinyPICO_OTA.ino.pico32.CRed.bin
    FIRMWARE_BINFILE2 = $GBOT_BASEPATH/TestCode/TinyPicoBinTests/TinyPICO_OTA.ino.pico32.PGreen.bin
    FIRMWARE_BINFILE3 = $GBOT_BASEPATH/TestCode/TinyPicoBinTests/TinyPICO_OTA.ino.pico32.YBlue.bin

### Sockets information: How programs communicate with each other
[sockets]
    # host for incoming telemetry to the robots
    telehost = '192.168.1.7' 
    #telehost = 172.20.10.105
    #telehost = '10.150.71.216'
    #telehost = '192.168.0.100' # .100 .255
    #telehost = '192.168.187.153'

### Details for the simbot simulated robot
[simbot]
    # Telemetry Reporting Frequency (Hz)
    telefreq = 2.0
    # Telemetry Text: Multi-line string, the bot cycles through the lines
    teletext = '''{"A":5,"t":97768,"d":1,"x":0.052642,"y":-0.095713,"z":9.818948,"u":0.001222,"v":0.00733,"w":-0.006109}
{"A":5,"t":97799,"d":5,"x":0.052699,"y":-0.0957099,"z":9.818999,"u":0.001299,"v":0.00799,"w":-0.006199}
{"A":5,"t":97799,"d":6,"x":0.052611,"y":-0.0957011,"z":9.818911,"u":0.001211,"v":0.00711,"w":-0.006111}'''
#    teletext = '''D=01 A=25 B=30
#D=05 A=30 B=10'''

### Information for the uploading program.
[upload]
    # Which program to use for each robot (uses config[telemetry][idparam] to id robots)
    1 = $FIRMWARE_BINFILE1
    5 = $FIRMWARE_BINFILE1

[usernotes]
    notes = """

#### Running the code ####

export PYTHONPATH=/Users/berthoud/instruments/electro/2021granulobots/Granulobot/Software
cd instruments/electro/2021granulobots/Granulobot
python Software/gbot_telemetry.py Configuration/gbotbaseconf.txt Configuration/gbotconfig_MGB.txt
python TestCode/SimBot/simbot.py Configuration/gbotbaseconf.txt Configuration/gbotconfig_MGB.txt
python Software/termui/gbot_termui.py Configuration/gbotbaseconf.txt Configuration/gbotconfig_MGB.txt
python Software/gbot_upload.py Configuration/gbotbaseconf.txt Configuration/gbotconfig_MGB.txt
python Software/gbot_button.py Configuration/gbotbaseconf.txt Configuration/gbotconfig_MGB.txt
tail -f ../data/gbotlog_202202
tail -f ../data/gbotelemetry_2202

#### Full Task List ####

* Test:
  * If open port do I receive both direct messages and broadcast over this address?
  * i.e. Try to send message to broadcast to server.
* Scriptagent
  * Goal: Make script agent such that scripts can be called.
  * Idea: all normal commands except wait(s)
  * Idea: either full script path or have an internal variable scriptpath
          use script path D:/myfiles/myscripts to set
  * Idea: other command is script scriptname.txt or script /home/me/myfiles/script.txt
  * Questions: Why does this have to be an agent?
    Answer: So it doesn't block any clients.
  * Question: What if a script is still executing and a new one is sent?
    Answer: Either stop old script or respond with error message (hint: use stop)
  * Idea script stop / resume commands
  * Question: where do answers from commands go?
  ----
  * Get operator parent (do not addagent if self is passed)
  * Make new operator (look at watchdog)
  * Set up scriptname command
  * Set up running scripts (one command each loop)
  * Set up wait (set time until to wait so still returning messages)
  * Set up addl commands: scriptpath, stop, resume, status (what is running, last script, scriptpath)
* Upload:
  * Add option to upload to certain robots (1/5/7)
  * Add detection if upload was sucessfull and if not try again
  * Check if upload can happen at same time as reporting of data
* Telemetry
  * Make sure subthreads die after 1s if no data (crash with error from timeout?)
  * Logging set up for less messages in terminal (INFO in terminal but DEBUG in file)
* Commandinterface (UDP)
  # On startup check if telemetry is running (after 1s delay) and report error if not.
  # Add Socket interface and (simple) web interface
  # Userinterface: allow uparrow for last cmd, allow getting messages while writing (look at vtcode)
    * google how to do it (as terminal UI), if needed uset getch() equivalent and micromanage
    ==>> Put gettele and sendcmd into library
  * Config agent: make better all commands
  * Config agent: run through all commands and bugcheck
  * Telemetry and command agent: add timeouts and error catch if things go bad
    * I.e. telecmd program not running, not answering
  * For telemetry agent: flexible commands commlist (ip, last entry, MAC) varlist (acc, vel, motor settings)
  * For telemetry agent: get 1 message from robot every seconds for 10s or so
* Documentation
  * ICD between the programs and gbot_telemetry
  * How to write a program to run the robots (what is interface and how to use it)
  * List of commands to robots
* Plotting: Add program to display live data
  
DONE:
# Firmwareupload
  ./ Make basic file: header with usage manual and stuffs (requires config)
  ./ Copy upload script to support (or gbotlib?)
  ./ Define config file parameters
  ./ Programming:
    ./ Setup logging (output and gbot telemetry logfile)
    ./ Program find datalog file
    ./ Load json of each robot
    ./ Send file to each robot
  ./ Testing
    ./ Make test log file for 2 robots
    ./ Test locally with 2 robots (2 different programs)
    ./ Test while gbot_telemetry is running and confirm receipt of logs

# Testrobot: prog that sends string NHz and listens on port to receive messages
  ./ Set up program
  ./ Get config (use library)
  ./ Set ports
  ./ Run delay
  ./ Report telemetry
  ./ Check for commands
# Telemetry
  ./ Have the computer announce it's IP to the robots (broadcast command)
    * IDEA: add a command to the robots with it's IP then the robots send to that IP
    * Question: how to make send ONLY to that IP or add that IP to the list? 
      NO but IP can be broadcasting
    * Send at startup, by request and/or regular intervals (not all the time)
    * IDEA: restrict boradcasting IP range in router (see if faster messages)
    * TODO: Implement telip command for the robots to receive new telemetry IP address
  ./ Basic loop setup and memory for messages: Dict, open file
  ./ Set up configuration ports and stuffs
  ./ Thread function to read from robots
    ./ add detection of IP address and add to message
    ./ Make it deamon so off when shutodwn
  ./ Thread for respond to telequerry
    ./ make new thread for each connection to avoid blocking main program
  ./ Exit if prompted from telequerry
  ./ Connect real robot
  ./ Decision: Put command into telemetry program different threads
  ./ Design have commloop and commhandle for commands to the bots
  ./ Add local logging: setting up and send info to file and screen
  # Change code such that robot is kicked out if after 2s no message from it.
    ./ add time:unix time with milliseconds to string
    ./ have getelemetry() with a timeout parameter, old ones are kept (not working with raw)
       timeout = 0 -> all messages are sent
    ./ Add tele hist option in commandinterface
  ./ Add "all" in robot ID to send message to all robots.
    ./ Add all option to gbot_telemetry
      Nothing to do in command interface
  ./ Add "IP" in robot ID to send message to specific IP (can also include broadcast)
  ./ Thread to log messages (UDP)
# Library
  ./ Open config (also accepts multiple configs - see HAWC and loads envars)
  ./ Read from tele (can have robot ID for one robot)
  ./ Write to comm (returns error message)
  ./ Function to set up logging
# Configs:
  ./ Make baseconfig and delta config
# Command Interface:
  ./ Basic setup with existing parts:
    ./ Add files: Agentparent, Interparent, Userinter, Configagent
    ./ Add interfaces and agents: Userinter, configagent
  ./ Make telemetry agent - get (gets telemetry into memory)
    ./ setup basic agenst
    ./ add command for one robot only
  ./ Send command agent - send robotId command
# Documentation
  ./ How to run telemetry and command program(s)
    ./ What to focus on in config file
  ./ How to use simple gui - or at least how to get help on running it.
# Other Issues
  ./ Update for internal AF_INET instead of AF_UNIX - to make windows compatible
    It "seems" to work but without a good windows computer I can't test it.
    ./ Change the relevant code in telemetry - test run
      ./ New keywords: NONE: We use comsock for port, telesock for port and 127.0.0.1.
    ./ In interface move the tele and comm code to utils and change it there.
    QUESTION: Keep other interface code avialable if I need to change it back?
              A: NO I can always look up old code on github and since it's only in
                 telemetry and the library it will be easy to change.


  
"""